import heapq

# Define the goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Directions for movement: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Find position of the empty tile (0)
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Manhattan Distance heuristic
def manhattan(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_i = (value - 1) // 3
                goal_j = (value - 1) % 3
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

# Convert list of lists to a tuple (hashable for sets)
def to_tuple(state):
    return tuple(tuple(row) for row in state)

# Check if the puzzle is solvable
def is_solvable(puzzle):
    flat = [num for row in puzzle for num in row if num != 0]
    inv_count = 0
    for i in range(len(flat)):
        for j in range(i + 1, len(flat)):
            if flat[i] > flat[j]:
                inv_count += 1
    return inv_count % 2 == 0

# A* Search Algorithm
def solve_puzzle(start_state):
    if not is_solvable(start_state):
        print("Puzzle is not solvable.")
        return

    pq = []
    visited = set()

    heapq.heappush(pq, (manhattan(start_state), 0, start_state, []))

    while pq:
        est_total_cost, cost_so_far, current_state, path = heapq.heappop(pq)

        if current_state == goal_state:
            print("Solved in", cost_so_far, "moves.")
            for step in path + [current_state]:
                for row in step:
                    print(row)
                print()
            return

        visited.add(to_tuple(current_state))

        x, y = find_zero(current_state)

        for dx, dy in moves:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = [row[:] for row in current_state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]

                if to_tuple(new_state) not in visited:
                    new_cost = cost_so_far + 1
                    estimated_total = new_cost + manhattan(new_state)
                    heapq.heappush(pq, (estimated_total, new_cost, new_state, path + [current_state]))

    print("No solution found.")

# Sample input
start = [[1, 2, 3],
         [4, 0, 6],
         [7, 5, 8]]

solve_puzzle(start)
